import re
from os import remove

from aiogram.types import Message, FSInputFile

from bot.Commands import ICommand
from bot.Content import TextContentGenerator, AudioContentGenerator
from bot.Utils import Utils


class ContentDeliveryCommand(ICommand):
    errors = {
        'TextGenerationFailed': '–£–ø—Å... –í –ø—Ä–æ—Ü–µ—Å—Å–µ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Ç–µ–∫—Å—Ç–∞ –≤–æ–∑–Ω–∏–∫–ª–∞ –ø—Ä–æ–±–ª–µ–º–∫–∞. ü§ñ –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, '
                                '–ø–æ–ø—Ä–æ–±—É–π –µ—â—ë —Ä–∞–∑–æ–∫!',
        'AudioGenerationFailed': '–û –Ω–µ—Ç, –∫–∞–∂–µ—Ç—Å—è, —á—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫ —Å —Å–æ–∑–¥–∞–Ω–∏–µ–º –∞—É–¥–∏–æ. üéµ –î–∞–≤–∞–π –ø–æ–ø—Ä–æ–±—É–µ–º –µ—â—ë —Ä–∞–∑'
    }

    start_generation_message = ('üé®<b>–¢–≤–æ—Ä—á–µ—Å–∫–∏–π –ø—Ä–æ—Ü–µ—Å—Å –∑–∞–ø—É—â–µ–Ω!</b> –ú—ã —Ä–∞–±–æ—Ç–∞–µ–º –Ω–∞–¥ —Å–æ–∑–¥–∞–Ω–∏–µ–º —Ç–≤–æ–µ–≥–æ —à–µ–¥–µ–≤—Ä–∞. '
                                '–≠—Ç–æ –∑–∞–π–º—ë—Ç –Ω–µ–º–Ω–æ–≥–æ –≤—Ä–µ–º–µ–Ω–∏, —Å–ø–∞—Å–∏–±–æ –∑–∞ —Ç–µ—Ä–ø–µ–Ω–∏–µ. üïí')
    finish_generation_message = (
        '<b>–í–æ—Ç —á—Ç–æ —É –Ω–∞—Å –ø–æ–ª—É—á–∏–ª–æ—Å—å!</b> üìù\n\n{generated_text}\n\n'
        '‚úçÔ∏è –ï—Å–ª–∏ —Ö–æ—á–µ—à—å —á—Ç–æ-—Ç–æ –∏–∑–º–µ–Ω–∏—Ç—å ‚Äî –≤—Å–µ–≥–¥–∞ –º–æ–∂–Ω–æ –Ω–∞—á–∞—Ç—å –∑–∞–Ω–æ–≤–æ.'
    )

    def __init__(self, style_type: str, audio_mode: bool, initial_text: str):
        self.style_type = style_type
        self.audio_mode = audio_mode
        self.initial_text = initial_text

    async def handle_text_content(self, message: Message) -> str:
        generated_text = await TextContentGenerator(self.style_type, self.initial_text).generate_content(
            self.initial_text)

        if not generated_text:
            await message.edit_text(text=self.errors['TextGenerationFailed'], parse_mode='html')
            return ''

        await message.edit_text(text=self.finish_generation_message.format(generated_text=generated_text), parse_mode='html')
        return generated_text

    async def handle_audio_content(self, message: Message, generated_text: str) -> None:
        generated_text = Utils.replace_english_chars(generated_text, '–ø—É–ø—É–ø—É')
        generated_text = re.sub(r'<b>(.*?)</b>', r'\1', generated_text)

        if self.audio_mode:
            generated_audio_path = await AudioContentGenerator().generate_content(generated_text)
            if not generated_audio_path:
                await message.edit_text(text=self.errors['AudioGenerationFailed'], parse_mode='html')
                return

            audio_file = FSInputFile(path=generated_audio_path, filename='Music.wav')
            await message.bot.send_audio(message.chat.id, audio=audio_file)

            # –ü–æ—Å–ª–µ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Ñ–∞–π–ª –±–æ–ª—å—à–µ –Ω–µ –Ω—É–∂–µ–Ω, –∑–Ω–∞—á–∏—Ç –º–æ–∂–Ω–æ —É–¥–∞–ª–∏—Ç—å
            remove(generated_audio_path)

    async def execute(self, message: Message) -> None:
        await message.edit_text(text=self.start_generation_message, parse_mode='html')

        generated_text = await self.handle_text_content(message)
        if not generated_text:
            return

        await self.handle_audio_content(message, generated_text)
